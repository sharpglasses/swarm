// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "content.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace swarm {

namespace {

const ::google::protobuf::Descriptor* PbRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbEmit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbEmit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbDispatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbDispatch_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbDispatch_PbVariable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbDispatch_PbVariable_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbContentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbContentList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_content_2eproto() {
  protobuf_AddDesc_content_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "content.proto");
  GOOGLE_CHECK(file != NULL);
  PbRequest_descriptor_ = file->message_type(0);
  static const int PbRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, tv_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, tv_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, frame_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, decoder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, src_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, dst_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, src_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, dst_port_),
  };
  PbRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbRequest_descriptor_,
      PbRequest::default_instance_,
      PbRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbRequest));
  PbEmit_descriptor_ = file->message_type(1);
  static const int PbEmit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, next_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, src_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, dst_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, proto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, src_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, dst_port_),
  };
  PbEmit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbEmit_descriptor_,
      PbEmit::default_instance_,
      PbEmit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbEmit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbEmit));
  PbDispatch_descriptor_ = file->message_type(2);
  static const int PbDispatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch, var_),
  };
  PbDispatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbDispatch_descriptor_,
      PbDispatch::default_instance_,
      PbDispatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbDispatch));
  PbDispatch_PbVariable_descriptor_ = PbDispatch_descriptor_->nested_type(0);
  static const int PbDispatch_PbVariable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch_PbVariable, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch_PbVariable, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch_PbVariable, idx_),
  };
  PbDispatch_PbVariable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbDispatch_PbVariable_descriptor_,
      PbDispatch_PbVariable::default_instance_,
      PbDispatch_PbVariable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch_PbVariable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbDispatch_PbVariable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbDispatch_PbVariable));
  PbContent_descriptor_ = file->message_type(3);
  static const int PbContent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContent, req_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContent, emit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContent, disp_),
  };
  PbContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbContent_descriptor_,
      PbContent::default_instance_,
      PbContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbContent));
  PbContentList_descriptor_ = file->message_type(4);
  static const int PbContentList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContentList, next_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContentList, content_),
  };
  PbContentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbContentList_descriptor_,
      PbContentList::default_instance_,
      PbContentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbContentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbContentList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_content_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbRequest_descriptor_, &PbRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbEmit_descriptor_, &PbEmit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbDispatch_descriptor_, &PbDispatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbDispatch_PbVariable_descriptor_, &PbDispatch_PbVariable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbContent_descriptor_, &PbContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbContentList_descriptor_, &PbContentList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_content_2eproto() {
  delete PbRequest::default_instance_;
  delete PbRequest_reflection_;
  delete PbEmit::default_instance_;
  delete PbEmit_reflection_;
  delete PbDispatch::default_instance_;
  delete PbDispatch_reflection_;
  delete PbDispatch_PbVariable::default_instance_;
  delete PbDispatch_PbVariable_reflection_;
  delete PbContent::default_instance_;
  delete PbContent_reflection_;
  delete PbContentList::default_instance_;
  delete PbContentList_reflection_;
}

void protobuf_AddDesc_content_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rcontent.proto\022\005swarm\"\267\001\n\tPbRequest\022\016\n\006"
    "tv_sec\030\001 \002(\r\022\017\n\007tv_usec\030\002 \002(\r\022\020\n\010frame_i"
    "d\030\003 \002(\005\022\017\n\007payload\030\004 \002(\014\022\017\n\007decoder\030\005 \001("
    "\005\022\020\n\010src_addr\030\006 \001(\014\022\020\n\010dst_addr\030\007 \001(\014\022\r\n"
    "\005proto\030\010 \001(\005\022\020\n\010src_port\030\t \001(\005\022\020\n\010dst_po"
    "rt\030\n \001(\005\"~\n\006PbEmit\022\017\n\007payload\030\001 \002(\014\022\014\n\004n"
    "ext\030\002 \002(\005\022\020\n\010src_addr\030\003 \001(\014\022\020\n\010dst_addr\030"
    "\004 \001(\014\022\r\n\005proto\030\005 \001(\005\022\020\n\010src_port\030\006 \001(\005\022\020"
    "\n\010dst_port\030\007 \001(\005\"|\n\nPbDispatch\022\r\n\005event\030"
    "\001 \002(\r\022)\n\003var\030\002 \003(\0132\034.swarm.PbDispatch.Pb"
    "Variable\0324\n\nPbVariable\022\013\n\003key\030\001 \002(\r\022\014\n\004d"
    "ata\030\002 \002(\014\022\013\n\003idx\030\003 \002(\r\"h\n\tPbContent\022\035\n\003r"
    "eq\030\001 \002(\0132\020.swarm.PbRequest\022\033\n\004emit\030\002 \001(\013"
    "2\r.swarm.PbEmit\022\037\n\004disp\030\003 \003(\0132\021.swarm.Pb"
    "Dispatch\"E\n\rPbContentList\022\021\n\tnext_file\030\001"
    " \001(\t\022!\n\007content\030\002 \003(\0132\020.swarm.PbContent", 639);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "content.proto", &protobuf_RegisterTypes);
  PbRequest::default_instance_ = new PbRequest();
  PbEmit::default_instance_ = new PbEmit();
  PbDispatch::default_instance_ = new PbDispatch();
  PbDispatch_PbVariable::default_instance_ = new PbDispatch_PbVariable();
  PbContent::default_instance_ = new PbContent();
  PbContentList::default_instance_ = new PbContentList();
  PbRequest::default_instance_->InitAsDefaultInstance();
  PbEmit::default_instance_->InitAsDefaultInstance();
  PbDispatch::default_instance_->InitAsDefaultInstance();
  PbDispatch_PbVariable::default_instance_->InitAsDefaultInstance();
  PbContent::default_instance_->InitAsDefaultInstance();
  PbContentList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_content_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_content_2eproto {
  StaticDescriptorInitializer_content_2eproto() {
    protobuf_AddDesc_content_2eproto();
  }
} static_descriptor_initializer_content_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PbRequest::kTvSecFieldNumber;
const int PbRequest::kTvUsecFieldNumber;
const int PbRequest::kFrameIdFieldNumber;
const int PbRequest::kPayloadFieldNumber;
const int PbRequest::kDecoderFieldNumber;
const int PbRequest::kSrcAddrFieldNumber;
const int PbRequest::kDstAddrFieldNumber;
const int PbRequest::kProtoFieldNumber;
const int PbRequest::kSrcPortFieldNumber;
const int PbRequest::kDstPortFieldNumber;
#endif  // !_MSC_VER

PbRequest::PbRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbRequest::InitAsDefaultInstance() {
}

PbRequest::PbRequest(const PbRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbRequest::SharedCtor() {
  _cached_size_ = 0;
  tv_sec_ = 0u;
  tv_usec_ = 0u;
  frame_id_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decoder_ = 0;
  src_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proto_ = 0;
  src_port_ = 0;
  dst_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbRequest::~PbRequest() {
  SharedDtor();
}

void PbRequest::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (src_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete src_addr_;
  }
  if (dst_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_addr_;
  }
  if (this != default_instance_) {
  }
}

void PbRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbRequest_descriptor_;
}

const PbRequest& PbRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbRequest* PbRequest::default_instance_ = NULL;

PbRequest* PbRequest::New() const {
  return new PbRequest;
}

void PbRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tv_sec_ = 0u;
    tv_usec_ = 0u;
    frame_id_ = 0;
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    decoder_ = 0;
    if (has_src_addr()) {
      if (src_addr_ != &::google::protobuf::internal::kEmptyString) {
        src_addr_->clear();
      }
    }
    if (has_dst_addr()) {
      if (dst_addr_ != &::google::protobuf::internal::kEmptyString) {
        dst_addr_->clear();
      }
    }
    proto_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    src_port_ = 0;
    dst_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 tv_sec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_sec_)));
          set_has_tv_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tv_usec;
        break;
      }
      
      // required uint32 tv_usec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tv_usec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tv_usec_)));
          set_has_tv_usec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frame_id;
        break;
      }
      
      // required int32 frame_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frame_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_id_)));
          set_has_frame_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payload;
        break;
      }
      
      // required bytes payload = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_decoder;
        break;
      }
      
      // optional int32 decoder = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decoder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &decoder_)));
          set_has_decoder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_src_addr;
        break;
      }
      
      // optional bytes src_addr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_dst_addr;
        break;
      }
      
      // optional bytes dst_addr = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_proto;
        break;
      }
      
      // optional int32 proto = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proto_)));
          set_has_proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_src_port;
        break;
      }
      
      // optional int32 src_port = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_port_)));
          set_has_src_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dst_port;
        break;
      }
      
      // optional int32 dst_port = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_port_)));
          set_has_dst_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 tv_sec = 1;
  if (has_tv_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tv_sec(), output);
  }
  
  // required uint32 tv_usec = 2;
  if (has_tv_usec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tv_usec(), output);
  }
  
  // required int32 frame_id = 3;
  if (has_frame_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frame_id(), output);
  }
  
  // required bytes payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->payload(), output);
  }
  
  // optional int32 decoder = 5;
  if (has_decoder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->decoder(), output);
  }
  
  // optional bytes src_addr = 6;
  if (has_src_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->src_addr(), output);
  }
  
  // optional bytes dst_addr = 7;
  if (has_dst_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->dst_addr(), output);
  }
  
  // optional int32 proto = 8;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->proto(), output);
  }
  
  // optional int32 src_port = 9;
  if (has_src_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->src_port(), output);
  }
  
  // optional int32 dst_port = 10;
  if (has_dst_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dst_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 tv_sec = 1;
  if (has_tv_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tv_sec(), target);
  }
  
  // required uint32 tv_usec = 2;
  if (has_tv_usec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tv_usec(), target);
  }
  
  // required int32 frame_id = 3;
  if (has_frame_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frame_id(), target);
  }
  
  // required bytes payload = 4;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->payload(), target);
  }
  
  // optional int32 decoder = 5;
  if (has_decoder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->decoder(), target);
  }
  
  // optional bytes src_addr = 6;
  if (has_src_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->src_addr(), target);
  }
  
  // optional bytes dst_addr = 7;
  if (has_dst_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->dst_addr(), target);
  }
  
  // optional int32 proto = 8;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->proto(), target);
  }
  
  // optional int32 src_port = 9;
  if (has_src_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->src_port(), target);
  }
  
  // optional int32 dst_port = 10;
  if (has_dst_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dst_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 tv_sec = 1;
    if (has_tv_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_sec());
    }
    
    // required uint32 tv_usec = 2;
    if (has_tv_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tv_usec());
    }
    
    // required int32 frame_id = 3;
    if (has_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frame_id());
    }
    
    // required bytes payload = 4;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // optional int32 decoder = 5;
    if (has_decoder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->decoder());
    }
    
    // optional bytes src_addr = 6;
    if (has_src_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_addr());
    }
    
    // optional bytes dst_addr = 7;
    if (has_dst_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_addr());
    }
    
    // optional int32 proto = 8;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proto());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 src_port = 9;
    if (has_src_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_port());
    }
    
    // optional int32 dst_port = 10;
    if (has_dst_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbRequest::MergeFrom(const PbRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tv_sec()) {
      set_tv_sec(from.tv_sec());
    }
    if (from.has_tv_usec()) {
      set_tv_usec(from.tv_usec());
    }
    if (from.has_frame_id()) {
      set_frame_id(from.frame_id());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_decoder()) {
      set_decoder(from.decoder());
    }
    if (from.has_src_addr()) {
      set_src_addr(from.src_addr());
    }
    if (from.has_dst_addr()) {
      set_dst_addr(from.dst_addr());
    }
    if (from.has_proto()) {
      set_proto(from.proto());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_src_port()) {
      set_src_port(from.src_port());
    }
    if (from.has_dst_port()) {
      set_dst_port(from.dst_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRequest::CopyFrom(const PbRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void PbRequest::Swap(PbRequest* other) {
  if (other != this) {
    std::swap(tv_sec_, other->tv_sec_);
    std::swap(tv_usec_, other->tv_usec_);
    std::swap(frame_id_, other->frame_id_);
    std::swap(payload_, other->payload_);
    std::swap(decoder_, other->decoder_);
    std::swap(src_addr_, other->src_addr_);
    std::swap(dst_addr_, other->dst_addr_);
    std::swap(proto_, other->proto_);
    std::swap(src_port_, other->src_port_);
    std::swap(dst_port_, other->dst_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbRequest_descriptor_;
  metadata.reflection = PbRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbEmit::kPayloadFieldNumber;
const int PbEmit::kNextFieldNumber;
const int PbEmit::kSrcAddrFieldNumber;
const int PbEmit::kDstAddrFieldNumber;
const int PbEmit::kProtoFieldNumber;
const int PbEmit::kSrcPortFieldNumber;
const int PbEmit::kDstPortFieldNumber;
#endif  // !_MSC_VER

PbEmit::PbEmit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbEmit::InitAsDefaultInstance() {
}

PbEmit::PbEmit(const PbEmit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbEmit::SharedCtor() {
  _cached_size_ = 0;
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  next_ = 0;
  src_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dst_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proto_ = 0;
  src_port_ = 0;
  dst_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbEmit::~PbEmit() {
  SharedDtor();
}

void PbEmit::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (src_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete src_addr_;
  }
  if (dst_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete dst_addr_;
  }
  if (this != default_instance_) {
  }
}

void PbEmit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbEmit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbEmit_descriptor_;
}

const PbEmit& PbEmit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbEmit* PbEmit::default_instance_ = NULL;

PbEmit* PbEmit::New() const {
  return new PbEmit;
}

void PbEmit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    next_ = 0;
    if (has_src_addr()) {
      if (src_addr_ != &::google::protobuf::internal::kEmptyString) {
        src_addr_->clear();
      }
    }
    if (has_dst_addr()) {
      if (dst_addr_ != &::google::protobuf::internal::kEmptyString) {
        dst_addr_->clear();
      }
    }
    proto_ = 0;
    src_port_ = 0;
    dst_port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbEmit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes payload = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_next;
        break;
      }
      
      // required int32 next = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_next:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &next_)));
          set_has_next();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_src_addr;
        break;
      }
      
      // optional bytes src_addr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_src_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_src_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dst_addr;
        break;
      }
      
      // optional bytes dst_addr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dst_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dst_addr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_proto;
        break;
      }
      
      // optional int32 proto = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &proto_)));
          set_has_proto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_src_port;
        break;
      }
      
      // optional int32 src_port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_port_)));
          set_has_src_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dst_port;
        break;
      }
      
      // optional int32 dst_port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dst_port_)));
          set_has_dst_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbEmit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes payload = 1;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->payload(), output);
  }
  
  // required int32 next = 2;
  if (has_next()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->next(), output);
  }
  
  // optional bytes src_addr = 3;
  if (has_src_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->src_addr(), output);
  }
  
  // optional bytes dst_addr = 4;
  if (has_dst_addr()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->dst_addr(), output);
  }
  
  // optional int32 proto = 5;
  if (has_proto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->proto(), output);
  }
  
  // optional int32 src_port = 6;
  if (has_src_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->src_port(), output);
  }
  
  // optional int32 dst_port = 7;
  if (has_dst_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dst_port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbEmit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes payload = 1;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->payload(), target);
  }
  
  // required int32 next = 2;
  if (has_next()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->next(), target);
  }
  
  // optional bytes src_addr = 3;
  if (has_src_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->src_addr(), target);
  }
  
  // optional bytes dst_addr = 4;
  if (has_dst_addr()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dst_addr(), target);
  }
  
  // optional int32 proto = 5;
  if (has_proto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->proto(), target);
  }
  
  // optional int32 src_port = 6;
  if (has_src_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->src_port(), target);
  }
  
  // optional int32 dst_port = 7;
  if (has_dst_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dst_port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbEmit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes payload = 1;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }
    
    // required int32 next = 2;
    if (has_next()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->next());
    }
    
    // optional bytes src_addr = 3;
    if (has_src_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->src_addr());
    }
    
    // optional bytes dst_addr = 4;
    if (has_dst_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->dst_addr());
    }
    
    // optional int32 proto = 5;
    if (has_proto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->proto());
    }
    
    // optional int32 src_port = 6;
    if (has_src_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src_port());
    }
    
    // optional int32 dst_port = 7;
    if (has_dst_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dst_port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbEmit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbEmit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbEmit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbEmit::MergeFrom(const PbEmit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_next()) {
      set_next(from.next());
    }
    if (from.has_src_addr()) {
      set_src_addr(from.src_addr());
    }
    if (from.has_dst_addr()) {
      set_dst_addr(from.dst_addr());
    }
    if (from.has_proto()) {
      set_proto(from.proto());
    }
    if (from.has_src_port()) {
      set_src_port(from.src_port());
    }
    if (from.has_dst_port()) {
      set_dst_port(from.dst_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbEmit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbEmit::CopyFrom(const PbEmit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbEmit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void PbEmit::Swap(PbEmit* other) {
  if (other != this) {
    std::swap(payload_, other->payload_);
    std::swap(next_, other->next_);
    std::swap(src_addr_, other->src_addr_);
    std::swap(dst_addr_, other->dst_addr_);
    std::swap(proto_, other->proto_);
    std::swap(src_port_, other->src_port_);
    std::swap(dst_port_, other->dst_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbEmit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbEmit_descriptor_;
  metadata.reflection = PbEmit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbDispatch_PbVariable::kKeyFieldNumber;
const int PbDispatch_PbVariable::kDataFieldNumber;
const int PbDispatch_PbVariable::kIdxFieldNumber;
#endif  // !_MSC_VER

PbDispatch_PbVariable::PbDispatch_PbVariable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbDispatch_PbVariable::InitAsDefaultInstance() {
}

PbDispatch_PbVariable::PbDispatch_PbVariable(const PbDispatch_PbVariable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbDispatch_PbVariable::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbDispatch_PbVariable::~PbDispatch_PbVariable() {
  SharedDtor();
}

void PbDispatch_PbVariable::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void PbDispatch_PbVariable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbDispatch_PbVariable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbDispatch_PbVariable_descriptor_;
}

const PbDispatch_PbVariable& PbDispatch_PbVariable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbDispatch_PbVariable* PbDispatch_PbVariable::default_instance_ = NULL;

PbDispatch_PbVariable* PbDispatch_PbVariable::New() const {
  return new PbDispatch_PbVariable;
}

void PbDispatch_PbVariable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbDispatch_PbVariable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_idx;
        break;
      }
      
      // required uint32 idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbDispatch_PbVariable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  // required uint32 idx = 3;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbDispatch_PbVariable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }
  
  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  // required uint32 idx = 3;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbDispatch_PbVariable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }
    
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // required uint32 idx = 3;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbDispatch_PbVariable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbDispatch_PbVariable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbDispatch_PbVariable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbDispatch_PbVariable::MergeFrom(const PbDispatch_PbVariable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbDispatch_PbVariable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbDispatch_PbVariable::CopyFrom(const PbDispatch_PbVariable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDispatch_PbVariable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PbDispatch_PbVariable::Swap(PbDispatch_PbVariable* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(data_, other->data_);
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbDispatch_PbVariable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbDispatch_PbVariable_descriptor_;
  metadata.reflection = PbDispatch_PbVariable_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PbDispatch::kEventFieldNumber;
const int PbDispatch::kVarFieldNumber;
#endif  // !_MSC_VER

PbDispatch::PbDispatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbDispatch::InitAsDefaultInstance() {
}

PbDispatch::PbDispatch(const PbDispatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbDispatch::SharedCtor() {
  _cached_size_ = 0;
  event_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbDispatch::~PbDispatch() {
  SharedDtor();
}

void PbDispatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbDispatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbDispatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbDispatch_descriptor_;
}

const PbDispatch& PbDispatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbDispatch* PbDispatch::default_instance_ = NULL;

PbDispatch* PbDispatch::New() const {
  return new PbDispatch;
}

void PbDispatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_ = 0u;
  }
  var_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbDispatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_)));
          set_has_event();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_var;
        break;
      }
      
      // repeated .swarm.PbDispatch.PbVariable var = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_var:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_var()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_var;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbDispatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event = 1;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event(), output);
  }
  
  // repeated .swarm.PbDispatch.PbVariable var = 2;
  for (int i = 0; i < this->var_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->var(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbDispatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event = 1;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event(), target);
  }
  
  // repeated .swarm.PbDispatch.PbVariable var = 2;
  for (int i = 0; i < this->var_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->var(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbDispatch::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event = 1;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event());
    }
    
  }
  // repeated .swarm.PbDispatch.PbVariable var = 2;
  total_size += 1 * this->var_size();
  for (int i = 0; i < this->var_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->var(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbDispatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbDispatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbDispatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbDispatch::MergeFrom(const PbDispatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  var_.MergeFrom(from.var_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event()) {
      set_event(from.event());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbDispatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbDispatch::CopyFrom(const PbDispatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbDispatch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < var_size(); i++) {
    if (!this->var(i).IsInitialized()) return false;
  }
  return true;
}

void PbDispatch::Swap(PbDispatch* other) {
  if (other != this) {
    std::swap(event_, other->event_);
    var_.Swap(&other->var_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbDispatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbDispatch_descriptor_;
  metadata.reflection = PbDispatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbContent::kReqFieldNumber;
const int PbContent::kEmitFieldNumber;
const int PbContent::kDispFieldNumber;
#endif  // !_MSC_VER

PbContent::PbContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbContent::InitAsDefaultInstance() {
  req_ = const_cast< ::swarm::PbRequest*>(&::swarm::PbRequest::default_instance());
  emit_ = const_cast< ::swarm::PbEmit*>(&::swarm::PbEmit::default_instance());
}

PbContent::PbContent(const PbContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbContent::SharedCtor() {
  _cached_size_ = 0;
  req_ = NULL;
  emit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbContent::~PbContent() {
  SharedDtor();
}

void PbContent::SharedDtor() {
  if (this != default_instance_) {
    delete req_;
    delete emit_;
  }
}

void PbContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbContent_descriptor_;
}

const PbContent& PbContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbContent* PbContent::default_instance_ = NULL;

PbContent* PbContent::New() const {
  return new PbContent;
}

void PbContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req()) {
      if (req_ != NULL) req_->::swarm::PbRequest::Clear();
    }
    if (has_emit()) {
      if (emit_ != NULL) emit_->::swarm::PbEmit::Clear();
    }
  }
  disp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .swarm.PbRequest req = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_req()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_emit;
        break;
      }
      
      // optional .swarm.PbEmit emit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp;
        break;
      }
      
      // repeated .swarm.PbDispatch disp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_disp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_disp;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .swarm.PbRequest req = 1;
  if (has_req()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->req(), output);
  }
  
  // optional .swarm.PbEmit emit = 2;
  if (has_emit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->emit(), output);
  }
  
  // repeated .swarm.PbDispatch disp = 3;
  for (int i = 0; i < this->disp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->disp(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .swarm.PbRequest req = 1;
  if (has_req()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->req(), target);
  }
  
  // optional .swarm.PbEmit emit = 2;
  if (has_emit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->emit(), target);
  }
  
  // repeated .swarm.PbDispatch disp = 3;
  for (int i = 0; i < this->disp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->disp(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .swarm.PbRequest req = 1;
    if (has_req()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->req());
    }
    
    // optional .swarm.PbEmit emit = 2;
    if (has_emit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emit());
    }
    
  }
  // repeated .swarm.PbDispatch disp = 3;
  total_size += 1 * this->disp_size();
  for (int i = 0; i < this->disp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->disp(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbContent::MergeFrom(const PbContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  disp_.MergeFrom(from.disp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req()) {
      mutable_req()->::swarm::PbRequest::MergeFrom(from.req());
    }
    if (from.has_emit()) {
      mutable_emit()->::swarm::PbEmit::MergeFrom(from.emit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbContent::CopyFrom(const PbContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_req()) {
    if (!this->req().IsInitialized()) return false;
  }
  if (has_emit()) {
    if (!this->emit().IsInitialized()) return false;
  }
  for (int i = 0; i < disp_size(); i++) {
    if (!this->disp(i).IsInitialized()) return false;
  }
  return true;
}

void PbContent::Swap(PbContent* other) {
  if (other != this) {
    std::swap(req_, other->req_);
    std::swap(emit_, other->emit_);
    disp_.Swap(&other->disp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbContent_descriptor_;
  metadata.reflection = PbContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PbContentList::kNextFileFieldNumber;
const int PbContentList::kContentFieldNumber;
#endif  // !_MSC_VER

PbContentList::PbContentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbContentList::InitAsDefaultInstance() {
}

PbContentList::PbContentList(const PbContentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbContentList::SharedCtor() {
  _cached_size_ = 0;
  next_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbContentList::~PbContentList() {
  SharedDtor();
}

void PbContentList::SharedDtor() {
  if (next_file_ != &::google::protobuf::internal::kEmptyString) {
    delete next_file_;
  }
  if (this != default_instance_) {
  }
}

void PbContentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbContentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbContentList_descriptor_;
}

const PbContentList& PbContentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_content_2eproto();  return *default_instance_;
}

PbContentList* PbContentList::default_instance_ = NULL;

PbContentList* PbContentList::New() const {
  return new PbContentList;
}

void PbContentList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_next_file()) {
      if (next_file_ != &::google::protobuf::internal::kEmptyString) {
        next_file_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbContentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string next_file = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->next_file().data(), this->next_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }
      
      // repeated .swarm.PbContent content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbContentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string next_file = 1;
  if (has_next_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_file().data(), this->next_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->next_file(), output);
  }
  
  // repeated .swarm.PbContent content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbContentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string next_file = 1;
  if (has_next_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->next_file().data(), this->next_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->next_file(), target);
  }
  
  // repeated .swarm.PbContent content = 2;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbContentList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string next_file = 1;
    if (has_next_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->next_file());
    }
    
  }
  // repeated .swarm.PbContent content = 2;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbContentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbContentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbContentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbContentList::MergeFrom(const PbContentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_next_file()) {
      set_next_file(from.next_file());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbContentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbContentList::CopyFrom(const PbContentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbContentList::IsInitialized() const {
  
  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void PbContentList::Swap(PbContentList* other) {
  if (other != this) {
    std::swap(next_file_, other->next_file_);
    content_.Swap(&other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbContentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbContentList_descriptor_;
  metadata.reflection = PbContentList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace swarm

// @@protoc_insertion_point(global_scope)
